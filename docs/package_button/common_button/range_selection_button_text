<h1>@starlib_pkg_button_common.range_selection_button_text</h1>
<p>@starlib_pkg_button_common.range_selection_binding is used to show button text in the range from $from to $to in #form_button_text. Uses style.label. Binding similar to global.range_selection_binding</p>
<span class="load-content" data-file="docs/global/range_selection_binding">@global.range_selection_binding</span>
<div id="important-info-container" class="important-info">
    <div class="important-info-bar"></div>
    <div class="important-info-content">
        <h3>How it works?</h3>
        <p>This element shows text in the range from $from to $to in #form_button_text, deleting \t. /t acts as a space symbol in the range.</p>
    </div>
</div>
<div class="table-container">
    <table>
        <thead>
            <tr>
                <th>Key</th>
                <th>Default value</th>
                <th>Description</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>$from</td>
                <td>""</td>
                <td>The point in the character range from which the selection range starts.</td>
                <td>float</td>
            </tr>
            <tr>
                <td>$to</td>
                <td>""</td>
                <td>The point in the character range to which the selection range goes.</td>
                <td>float</td>
            </tr>
    </table>
</div>
<div class="code-container">
    <div class="code-header">
        <h3>Example</h3>
        <button class="copy-button"></button>
    </div>
    <div class="code-content">
    //Since binding uses #form_button_text, you can only use this element in the button collection
    //...Button
    "my_text@starlib_pkg_button_common.range_selection_button_text": { //Annotation
        "$from": "100", //Range selection variables.
        "$to": "200",
        "font_type": "MinecraftTen" /*Since starlib_pkg_button_common.range_selection_button_text
        using style.label, we can change label parameters*/
    }
    </div>
</div>
<div class="code-container">
    <div class="code-header">
        <h3>Script example</h3>
        <button class="copy-button"></button>
    </div>
    <div class="code-content">
        //...Our form data
        .button(text("my text", 100) + text("another my text", 100)) //Using our function

        //...
        function text(text, totalLength) { //Here the totalLength is the number of characters that we need to achieve by adding \t
            if(text.length > totalLength) throw new Error("The text is too long...");
            return   text + "\t".repeat((totalLength - text.length));
        }
    </div>
</div>
<p>At this point, the text "another my text" will be displayed in our my_text element, since all \t will eventually be removed, and the first 100 characters will be added by another text in the button.</p>